# -*- coding: utf-8 -*-
"""Data Science: Testes estatísticos com Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_J4BRW8dLxNbPJQN3zUf_p7-HduQyukQ
"""

import pandas as pd
tmdb = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Alura/Data Science - Analises e visualização de dados/tmdb_5000_movies.csv')
tmdb.head()

tmdb.describe().round(2)

import seaborn as sns

ax = sns.distplot(tmdb.vote_average)
ax.set(xlabel="Nota média", ylabel="Densidade")
ax.set_title("Média de votos em filmes no TMDB 5000")

ax = sns.distplot(tmdb.vote_average, norm_hist = False, kde = False)
ax.set(xlabel="Nota média", ylabel="Frequência")
ax.set_title("Média de votos em filmes no TMDB 5000")

ax = sns.boxplot(x=tmdb.vote_average)
ax.set_title("Distribuição de nota média dos filmes do TMDB  5000")
ax.set(xlabel="Nota média do filme")

tmdb.query("vote_average == 0")

tmdb_com_mais_de_10_votos = tmdb.query("vote_count >= 10")
tmdb_com_mais_de_10_votos.head()

tmdb_com_mais_de_10_votos.describe()

ax = sns.distplot(tmdb_com_mais_de_10_votos.vote_average, norm_hist = False, kde = False)
ax.set(xlabel="Nota média", ylabel="Frequência")
ax.set_title("Média de votos em filmes no TMDB 5000 dentre os filmes com 10 ou mais votos")

ax = sns.distplot(tmdb_com_mais_de_10_votos.vote_average)
ax.set(xlabel="Nota média", ylabel="Densidade")
ax.set_title("Média de votos em filmes no TMDB 5000 dentre os filmes com 10 ou mais votos")

ax = sns.boxplot(x=tmdb_com_mais_de_10_votos.vote_average)
ax.set_title("Média de votos em filmes no TMDB 5000 dentre os filmes com 10 ou mais votos")
ax.set(xlabel="Nota média do filme")

"""# Análise do movielens

"""

notas = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Alura/Data Science - Analises e visualização de dados/ratings.csv')
notas.head()

nota_media_por_filme = notas.groupby("movieId").mean()['rating']
nota_media_por_filme.head()

ax = sns.distplot(nota_media_por_filme.values)
ax.set(xlabel="Nota média", ylabel="Densidade")
ax.set_title("Média de votos em filmes no Movielens 100k")

quantidade_de_votos_por_filme = notas.groupby("movieId").count()
 quantidade_de_votos_por_filme.query("rating >= 10")

quantidade_de_votos_por_filme = notas.groupby("movieId").count()
 filmes_com_pelo_menos_10_votos = quantidade_de_votos_por_filme.query("rating >= 10").index
 filmes_com_pelo_menos_10_votos.values

nota_media_do_filmes_com_pelo_menos_10_votos = nota_media_por_filme.loc[filmes_com_pelo_menos_10_votos.values]
nota_media_do_filmes_com_pelo_menos_10_votos.head()

ax = sns.distplot(nota_media_do_filmes_com_pelo_menos_10_votos)
ax.set(xlabel="Nota média", ylabel="Densidade")
ax.set_title("Média de votos em filmes no Movielens 100k com pelo menos 10 votos")

ax = sns.boxplot(x=nota_media_do_filmes_com_pelo_menos_10_votos.values)
ax.set_title("Média de votos em filmes no Movielens 100k com pelo menos 10 votos")
ax.set(xlabel="Nota média do filme")

ax = sns.distplot(nota_media_do_filmes_com_pelo_menos_10_votos, 
                  hist_kws = {'cumulative':True},
                  kde_kws = {'cumulative':True})
ax.set(xlabel="Nota média", ylabel="Densidade")
ax.set_title("Média de votos em filmes no Movielens 100k com pelo menos 10 votos")



"""# Analisando a distribuição dos dados capturados de outros campos do TMDB"""

tmdb_com_mais_de_10_votos.vote_count

ax = sns.distplot(tmdb_com_mais_de_10_votos.vote_count)
ax.set(xlabel="Número de votos", ylabel="Densidade")
ax.set_title("Número de votos em filmes no TMDB 5000 com 10 ou mais votos")

tmdb.query("budget > 0").budget

ax = sns.distplot(tmdb.query("budget > 0").budget)
ax.set(xlabel="Budget (gastos)", ylabel="Densidade")
ax.set_title("Gastos em filmes no TMDB 5000")

tmdb.query("popularity==0")

"""### Utilizando query() para filtrar os dados """

tmdb.query("popularity > 0").popularity

ax = sns.distplot(tmdb.popularity)
ax.set(xlabel="Popularidade", ylabel="Densidade")
ax.set_title("Popularidade dos filmes no TMDB 5000")

tmdb.runtime

ax = sns.distplot(tmdb.query("runtime > 0").runtime)
ax.set(xlabel="Tempo de duração", ylabel="Densidade")
ax.set_title("Tempo de duração dos filmes no TMDB 5000")

tmdb.runtime.isnull().sum()

"""### Removendo valores NaN com o (dropna())"""

tmdb.runtime.dropna()

"""Visualizar gráficos de maneira cumulativa """

ax = sns.distplot(tmdb.query("runtime > 0").runtime.dropna(),
                hist_kws = {'cumulative':True},
                  kde_kws = {'cumulative':True})
ax.set(xlabel="Tempo de duração", ylabel="% de filmes")
ax.set_title("Tempo de duração dos filmes no TMDB 5000")

"""### Separação de dados com quantile()."""

tmdb.query("runtime > 0").runtime.dropna().quantile(0.8)

"""# Movielens: média dos filmes com pelo menos 10 votos"""

nota_media_do_filmes_com_pelo_menos_10_votos

print(" Média dos filmes com pelo menos 10 votos", nota_media_do_filmes_com_pelo_menos_10_votos.mean().round(2))

nota_media_do_filmes_com_pelo_menos_10_votos[0:2].mean().round(2)

len(nota_media_do_filmes_com_pelo_menos_10_votos)

medias =list()
for i in range(1, len(nota_media_do_filmes_com_pelo_menos_10_votos)):
  medias.append(nota_media_do_filmes_com_pelo_menos_10_votos[0:i].mean())
medias

import matplotlib.pyplot as plt

medias =list()
for i in range(1, len(nota_media_do_filmes_com_pelo_menos_10_votos)):
  medias.append(nota_media_do_filmes_com_pelo_menos_10_votos[0:i].mean())


plt.plot(medias)

import matplotlib.pyplot as plt
import numpy as np

np.random.seed(75243)
tem = nota_media_do_filmes_com_pelo_menos_10_votos.sample(frac=1)

medias =list()
for i in range(1, len(tem)):
  medias.append(tem[0:i].mean())


plt.plot(medias)

import matplotlib.pyplot as plt
import numpy as np

np.random.seed(75243)
temp = nota_media_do_filmes_com_pelo_menos_10_votos.sample(frac=1)

medias = [temp[0:i].mean() for i in range(1, len(temp))]

plt.plot(medias)

"""## Encontrando um intervalo de confiança"""

from statsmodels.stats.weightstats import zconfint

zconfint(nota_media_do_filmes_com_pelo_menos_10_votos)

""":"""

from statsmodels.stats.weightstats import DescrStatsW

descr_todos_com_10_votos = DescrStatsW(nota_media_do_filmes_com_pelo_menos_10_votos)

descr_todos_com_10_votos.tconfint_mean()

"""## Analisando um filme específico"""

filmes = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Alura/Data Science - Analises e visualização de dados/movies.csv')
filmes.head()

filmes.query('movieId==1')

notas1 = notas.query('movieId== 1')
notas1.head()

ax = sns.distplot(notas1.rating)
ax.set(xlabel="Nota", ylabel="Densidade")
ax.set_title("Distribuição das notas para o Toy Story")

ax = sns.boxplot(x=notas1.rating)
ax.set(xlabel="Nota")
ax.set_title("Distribuição das notas para o Toy Story")

notas1.rating.mean()

notas1.rating.count()

"""### intervalo de confiança"""

zconfint(notas1.rating)

from statsmodels.stats.weightstats import ztest

ztest(notas1.rating, value = 3.4320503405352603)

np.random.seed(75241)
temp = notas1.sample(frac=1).rating

medias = [temp[0:i].mean() for i in range(1, len(temp))]

plt.plot(medias)

np.random.seed(75241)
temp = notas1.sample(frac=1).rating

def calcula_teste(i):
    media = temp[0:i].mean()
    stat, p = ztest(temp[0:i], value = 3.4320503405352603) 
    return (i, media, p)

medias = [calcula_teste(i) for i in range(2, len(temp))]
medias

np.random.seed(75241)
temp = notas1.sample(frac=1).rating

def calcula_teste(i):
    media = temp[0:i].mean()
    stat, p = ztest(temp[0:i], value = 3.4320503405352603) 
    return (i, media, p)

valores = np.array([calcula_teste(i) for i in range(2, len(temp))])

plt.plot(valores[:,0],valores[:,1])

np.random.seed(75241)
temp = notas1.sample(frac=1).rating

def calcula_teste(i):
    media = temp[0:i].mean()
    stat, p = ztest(temp[0:i], value = 3.4320503405352603) 
    return (i, media, p)

valores = np.array([calcula_teste(i) for i in range(2, len(temp))])

plt.plot(valores[:,0],valores[:,1])
plt.plot(valores[:,0], valores[:,2])
plt.hlines(y = 0.05, xmin = 2, xmax = len(temp), colors='g')

"""## Comparação de dois conjuntos de amostras

"""

print(ztest(notas1.rating, notas.rating)) # p-value

zconfint(notas1.rating, notas.rating)

from scipy.stats import ttest_ind

ttest_ind(notas.rating, notas1.rating)

descr_todas_as_notas = DescrStatsW(notas.rating)
descr_toystory = DescrStatsW(notas1.rating)
descr_todas_as_notas.get_compare(descr_toystory)

descr_todas_as_notas = DescrStatsW(notas.rating)
descr_toystory = DescrStatsW(notas1.rating)
comparacao = descr_todas_as_notas.get_compare(descr_toystory)

comparacao.summary()

comparacao.summary(use_t=True)

plt.boxplot([notas.rating, notas1.rating], labels=["Todas as notas", "Toy Story"])
plt.title(" Distribuição das notas de acordo com os filmes")

plt.boxplot([notas.rating, notas1.rating[3:12]], labels=["Todas as notas", "Toy Story(do 3 ao 12"])
plt.title(" Distribuição das notas de acordo com os filmes")

descr_todas_as_notas = DescrStatsW(notas.rating)
descr_toystory = DescrStatsW(notas1[3:12].rating)
comparacao = descr_todas_as_notas.get_compare(descr_toystory)

comparacao.summary(use_t=True)

"""## Comparar a média de dois filmes """

filmes.query("movieId in [1, 593, 72226]")

notas1 = notas.query("movieId == 1")
notas593 = notas.query("movieId == 593")
notas72226 = notas.query("movieId == 72226")


plt.boxplot([notas1.rating, notas593.rating, notas72226.rating], labels=["Toy Story", "Silence of the Lambs", " Fantastic Mr. Fox"])
plt.title(" Distribuição das notas de acordo com os filmes")

notas72226.describe()

sns.boxplot(x = "movieId", y = "rating", data = notas.query("movieId in (1, 593, 72226)"))

descr_1 = DescrStatsW(notas1.rating)
descr_593 = DescrStatsW(notas593.rating)
comparacao = descr_1.get_compare(descr_593)

comparacao.summary()

descr_72226= DescrStatsW(notas72226.rating)
descr_593 = DescrStatsW(notas593.rating)
comparacao = descr_72226.get_compare(descr_593)

comparacao.summary(use_t=True)

comparacao = descr_1.get_compare(descr_72226)

comparacao.summary(use_t=True)

notas.query("movieId in (1, 593, 72226)").groupby("movieId").count()

from scipy.stats import normaltest

stat, p = normaltest(notas1.rating)
p

from scipy.stats import ranksums

_, p = ranksums(notas1.rating, notas593.rating)
p

